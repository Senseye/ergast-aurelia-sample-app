{"version":3,"sources":["app.js","environment.js","main.js","configs/app-fetch-config.js","resources/index.js","routes/app-routes.js","season-races/season-races.js","seasons/seasons.js","services/abstract-service.js","services/ergast-service.js","resources/elements/nav-bar.js","resources/value-converters/date-format.js","resources/elements/driver/driver-templates.js","resources/elements/driver/driver.js","/Users/soala/Sandbox/mobiquity-f1/src/app.html","/Users/soala/Sandbox/mobiquity-f1/src/season-races/season-races.html","/Users/soala/Sandbox/mobiquity-f1/src/seasons/seasons.html","styles/_layout.scss","styles/components/_app-nav.scss","styles/components/_driver.scss","/Users/soala/Sandbox/mobiquity-f1/src/resources/elements/app-footer.html","/Users/soala/Sandbox/mobiquity-f1/src/resources/elements/loading-spinner.html","/Users/soala/Sandbox/mobiquity-f1/src/resources/elements/nav-bar.html","/Users/soala/Sandbox/mobiquity-f1/src/resources/elements/driver/driver.html","/Users/soala/Sandbox/mobiquity-f1/src/resources/elements/driver/race-winner.html","/Users/soala/Sandbox/mobiquity-f1/src/resources/elements/driver/season-winner-detailed.html","/Users/soala/Sandbox/mobiquity-f1/src/resources/elements/driver/season-winner.html"],"names":["App","router","appFetchConfig","configureRouter","config","title","map","activate","configure","debug","testing","Promise","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","globalResources","feature","developmentLogging","plugin","start","then","setRoot","AppFetchConfig","httpClient","eventAggregator","httpConfig","withInterceptor","requestError","alert","responseError","appRoutes","route","redirect","name","moduleId","navbar","activationStrategy","back","EA_SEASON_WINNER_LOADED","EA_SEASON_RESULTS_LOADED","SeasonRaces","ergastService","ready","subscribeToEvents","winnerLoadedSubs","subscribe","loadRaces","seasonResultsSubs","params","seasonYear","year","loadStandings","getDriverStandings","response","json","setSeasonWinner","data","publish","seasonResult","MRData","StandingsTable","StandingsLists","DriverStandings","Driver","template","seasonWinnerDetailed","getSeasonResults","setRacesData","races","RaceTable","Races","race","raceDriver","Results","getDriverTemplate","driver","driverId","seasonWinner","raceWinner","deactivate","dispose","Seasons","getSeasons","seasonsData","SeasonTable","AbstractService","baseUrl","instance","get","fetch","url","BASE_URL","ErgastService","offset","limit","NavBarCustomElement","defaultDateFormat","DateFormatValueConverter","toView","value","format","DRIVER_TEMPLATES","DriverCustomElement","defaultBindingMode","oneTime"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\nimport {Router} from 'aurelia-router';\nimport {appRoutes} from 'routes/app-routes';\nimport {AppFetchConfig} from 'configs/app-fetch-config';\n\n@inject(Router, AppFetchConfig)\nexport class App {\n  constructor(router, appFetchConfig) {\n    this.router = router;\n    this.appFetchConfig = appFetchConfig;\n  }\n\n  configureRouter(config, router) {\n    config.title = 'Mobiquity Assignment';\n    config.map(appRoutes);\n    this.router = router;\n  }\n\n  activate() {\n    this.appFetchConfig.configure();\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .globalResources('resources/elements/loading-spinner.html')\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {inject} from 'aurelia-dependency-injection';\nimport {HttpClient} from 'aurelia-fetch-client';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n\n@inject(HttpClient, EventAggregator)\nexport class AppFetchConfig {\n  constructor(httpClient, eventAggregator) {\n    this.httpClient = httpClient;\n    this.eventAggregator = eventAggregator;\n  }\n\n  configure() {\n    this.httpClient.configure(httpConfig => {\n      httpConfig\n        .withInterceptor({\n          requestError(requestError) {\n            alert(\"Fetch client: request error.\");\n            return requestError;\n          },\n          responseError(responseError) {\n            alert(\"Fetch client: response error.\");\n            return responseError;\n          }\n        });\n    });\n  }\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","\nexport var appRoutes = [\n  { route: '', redirect: 'seasons' },\n  {\n    route: 'seasons',\n    name: 'seasons',\n    moduleId: 'seasons/seasons',\n    title: 'Formula 1 Seasons',\n    navbar: {\n    }\n  },\n  {\n    route: 'season/:year',\n    activationStrategy: 'replace',\n    name: 'season-races',\n    moduleId: 'season-races/season-races',\n    title: 'Race winners',\n    navbar: {\n      back: {\n        route: 'seasons',\n        title: 'Seasons'\n      }\n    }\n  }\n];\n","import {inject} from 'aurelia-dependency-injection';\nimport {ErgastService} from 'services/ergast-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {DRIVER_TEMPLATES} from 'resources/elements/driver/driver-templates';\n\nconst EA_SEASON_WINNER_LOADED = 'seasonRaces:seasonWinnerLoaded';\nconst EA_SEASON_RESULTS_LOADED = 'seasonRaces:seasonResultsLoaded';\n\n@inject(ErgastService, EventAggregator)\nexport class SeasonRaces {\n  /* this property is used in the view, to indicate that data is loading.\n  * It is set to `true` when all data is fetched from the web service. */\n  ready = false;\n\n  constructor(ergastService, eventAggregator) {\n    this.ergastService = ergastService;\n    this.eventAggregator = eventAggregator;\n    this.subscribeToEvents();\n  }\n\n  subscribeToEvents() {\n    this.winnerLoadedSubs = this.eventAggregator.subscribe(EA_SEASON_WINNER_LOADED, () => {\n      this.loadRaces();\n    });\n\n    this.seasonResultsSubs = this.eventAggregator.subscribe(EA_SEASON_RESULTS_LOADED, () => {\n      this.ready = true;\n    });\n  }\n\n  activate(params) {\n    this.seasonYear = params.year;\n    this.loadStandings();\n  }\n\n  loadStandings() {\n    this.ergastService.getDriverStandings(this.seasonYear).then(response => response.json()).then(data => {\n      this.setSeasonWinner(data);\n      this.eventAggregator.publish(EA_SEASON_WINNER_LOADED);\n    });\n  }\n\n  setSeasonWinner(data) {\n    this.seasonResult = data.MRData.StandingsTable.StandingsLists[0].DriverStandings[0];\n    this.seasonResult.Driver.template = DRIVER_TEMPLATES.seasonWinnerDetailed;\n  }\n\n  loadRaces() {\n    this.ergastService.getSeasonResults(this.seasonYear).then(response => response.json())\n      .then(data => {\n        this.setRacesData(data);\n        this.eventAggregator.publish(EA_SEASON_RESULTS_LOADED);\n      });\n  }\n\n  /*\n  * Iterating through Races and setting the proper template for a Driver.\n  * The idea behind is to remove any if-else logic from the view (when highlighting the season winner),\n  * and have it here in the ViewModel.\n  * */\n  setRacesData(data) {\n    this.races = data.MRData.RaceTable.Races.map((race) => {\n      let raceDriver = race.Results[0].Driver;\n      raceDriver.template = this.getDriverTemplate(raceDriver);\n      return race;\n    });\n  }\n\n  getDriverTemplate(driver) {\n    return driver.driverId === this.seasonResult.Driver.driverId\n      ? DRIVER_TEMPLATES.seasonWinner\n      : DRIVER_TEMPLATES.raceWinner;\n  }\n\n  deactivate() {\n    this.winnerLoadedSubs.dispose();\n    this.seasonResultsSubs.dispose();\n  }\n}\n","import {ErgastService} from 'services/ergast-service';\nimport {inject} from 'aurelia-dependency-injection';\n\n@inject(ErgastService)\nexport class Seasons {\n  ready = false;\n\n  constructor(ergastService) {\n    this.ergastService = ergastService;\n  }\n\n  activate() {\n    this.ergastService.getSeasons().then(response => response.json())\n      .then(data => {\n        this.seasonsData = data.MRData.SeasonTable.Seasons;\n        this.ready = true;\n      });\n  }\n}\n","import {Container} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-fetch-client';\n\n/*\n* AbstractService - every service, should extend this class.\n* In case the HttpClient library is replaced, it shouldn't affect the implemented services.\n* */\nexport class AbstractService {\n  constructor(baseUrl) {\n    this.httpClient = Container.instance.get(HttpClient);\n    this.baseUrl = baseUrl;\n  }\n\n  fetch(url) {\n    return this.httpClient.fetch(this.baseUrl + url);\n  }\n}\n","import {AbstractService} from 'services/abstract-service';\nimport {buildQueryString} from 'aurelia-path';\n\nconst BASE_URL = 'http://ergast.com/api/f1/';\n\nexport class ErgastService extends AbstractService {\n\n  constructor() {\n    super(BASE_URL);\n  }\n\n  /* The offset and limit are intentionally hardcoded.\n    I assumed the 2005-2015 period is required for reducing the complexity of the app.*/\n  getSeasons() {\n    return this.fetch(`seasons.json?${buildQueryString({\n      offset: 55,\n      limit: 11\n    })}`);\n  }\n\n  getSeasonResults(seasonYear) {\n    return this.fetch(`${seasonYear}/results/1.json`);\n  }\n\n  getDriverStandings(seasonYear) {\n    return this.fetch(`${seasonYear}/driverStandings.json`);\n  }\n}\n","import {inject} from 'aurelia-dependency-injection';\nimport {Router} from 'aurelia-router';\n\n@inject(Router)\nexport class NavBarCustomElement {\n  constructor(router) {\n    this.router = router;\n  }\n}\n","import moment from 'moment';\nexport const defaultDateFormat = 'MMMM Do, YYYY';\n\nexport class DateFormatValueConverter {\n  toView(value, format) {\n    format = format || defaultDateFormat;\n    return moment(value).format(format);\n  }\n}\n","\nexport const DRIVER_TEMPLATES = {\n  seasonWinner: 'season-winner',\n  raceWinner: 'race-winner',\n  seasonWinnerDetailed: 'season-winner-detailed'\n};\n","import {bindable, bindingMode} from 'aurelia-framework';\n\nexport class DriverCustomElement {\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) driver;\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) carConstructor;\n}\n",null,null,null,".main {\n  padding: 65px 0 25px;\n}\n\n.footer {\n  border-top: 1px solid #ccc;\n  padding-top: 15px;\n  text-align: center;\n}\n",".app-nav {\n  height: 45px;\n  line-height: 45px;\n\n  &__title {\n    color: white;\n    text-align: center;\n  }\n\n  &__back {\n    &:hover {\n      text-decoration: none;\n    }\n  }\n}\n",".driver {\n  &--season-winner {\n    color: gold;\n  }\n\n  &--race-winner {\n    color: #444;\n  }\n}\n",null,null,null,null,null,null,null],"sourceRoot":"../src"}